Transform: "AWS::Serverless-2016-10-31"

Parameters:
  EnvironmentStackName:
    Type: String
    AllowedValues: [qa, prod]

Mappings:
  Config:
    qa:
      TeamsAPIEndPoint: "https://ex5n1m4x7g.execute-api.us-west-2.amazonaws.com/prod/v1/"
      DevopsAccountNumber: 267277279063
      SecretName: "Teams/prod/ApiKey"
    prod:
      TeamsAPIEndPoint: "https://ex5n1m4x7g.execute-api.us-west-2.amazonaws.com/prod/v1/"
      DevopsAccountNumber: 932113703644
      SecretName: "Teams/prod/ApiKey"

Resources:      
  AlertManagerDeadLetterQueue:
    Type: AWS::SQS::Queue
  
  AlertManagerTemplateS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "yopdev-alerting-templates-${AWS::AccountId}-${AWS::Region}"

  DLQAlertManager:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "api"
      Handler: "alerting.dlq"
      Runtime: python3.8
      MemorySize: 256
      Timeout: 300
      Events:
        CheckAlarmsScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AlertManagerDeadLetterQueue.Arn
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          TEMPLATE_S3: !Sub "yopdev-alerting-templates-${AWS::AccountId}-${AWS::Region}"
          TEAMS_API_URL: !FindInMap [ Config, !Ref EnvironmentStackName, TeamsAPIEndPoint ]
          API_SECRET_NAME: !FindInMap [ Config, !Ref EnvironmentStackName, SecretName ]
      Policies:
        - Statement:
          - Sid: SQSList
            Effect: Allow
            Action:
            - sqs:ListQueues
            - sqs:ListQueueTags
            - sqs:GetQueueAttributes
            - sqs:GetQueueUrl
            - sqs:ListDeadLetterSourceQueues 
            Resource: '*'
          - Sid: CloudformationCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:ListStackResources
            Resource: 
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/DLQ-alerting-stack/*'
          - Sid: CloudformationValidate
            Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            - cloudformation:ListStacks
            - cloudformation:DescribeStacks
            Resource: "*"
          - Sid: iamPassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationDeploymentRole"
          - Sid: LambdaList
            Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListTags
            Resource: "*"
          - Sid: ListBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt AlertManagerTemplateS3.Arn
          - Sid: PutTemplates
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Join [ "/", [!GetAtt AlertManagerTemplateS3.Arn, "templates/*"] ]
          - Sid: TagResources
            Effect: Allow
            Action:
              - cloudwatch:TagResource
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*'
          - Sid: TagResourcesAPI
            Effect: Allow
            Action:
              - tag:TagResources
            Resource:
              - '*'

  LambdaAlertManager:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "api"
      Handler: "alerting.lambdaf"
      Runtime: python3.8
      MemorySize: 256
      Timeout: 300
      Events:
        CheckAlarmsScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AlertManagerDeadLetterQueue.Arn
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          TEMPLATE_S3: !Sub "yopdev-alerting-templates-${AWS::AccountId}-${AWS::Region}"
          TEAMS_API_URL: !FindInMap [ Config, !Ref EnvironmentStackName, TeamsAPIEndPoint ]
          API_SECRET_NAME: !FindInMap [ Config, !Ref EnvironmentStackName, SecretName ]
      Policies:
        - Statement:
          - Sid: CloudformationCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:ListStackResources
            Resource: 
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Lambda-alerting-stack/*'
          - Sid: CloudformationValidate
            Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            - cloudformation:ListStacks
            - cloudformation:DescribeStacks
            Resource: "*"
          - Sid: iamPassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationDeploymentRole"
          - Sid: LambdaList
            Effect: Allow
            Action:
              - lambda:ListFunctions
              - lambda:ListTags
            Resource: "*"
          - Sid: ListBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt AlertManagerTemplateS3.Arn
          - Sid: PutTemplates
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Join [ "/", [!GetAtt AlertManagerTemplateS3.Arn, "templates/*"] ]
          - Sid: TagResources
            Effect: Allow
            Action:
              - cloudwatch:TagResource
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*'
          - Sid: TagResourcesAPI
            Effect: Allow
            Action:
              - tag:TagResources
            Resource:
              - '*'

  APIgwAlertManager:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "api"
      Handler: "alerting.apigw"
      Runtime: python3.8
      MemorySize: 256
      Timeout: 300
      Events:
        CheckAlarmsScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AlertManagerDeadLetterQueue.Arn
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          TEMPLATE_S3: !Sub "yopdev-alerting-templates-${AWS::AccountId}-${AWS::Region}"
          TEAMS_API_URL: !FindInMap [ Config, !Ref EnvironmentStackName, TeamsAPIEndPoint ]
          API_SECRET_NAME: !FindInMap [ Config, !Ref EnvironmentStackName, SecretName ]
      Policies:
        - Statement:
          - Sid: CloudformationCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:ListStackResources
            Resource: 
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/API-gw-alerting-stack/*'
          - Sid: CloudformationValidate
            Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            - cloudformation:ListStacks
            - cloudformation:DescribeStacks
            Resource: "*"
          - Sid: iamPassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationDeploymentRole"
          - Sid: ListBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt AlertManagerTemplateS3.Arn
          - Sid: PutTemplates
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Join [ "/", [!GetAtt AlertManagerTemplateS3.Arn, "templates/*"] ]
          - Sid: GetRestAPIs
            Effect: Allow
            Action:
              - apigateway:GET
            Resource: "*" 
          - Sid: TagResources
            Effect: Allow
            Action:
              - cloudwatch:TagResource
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*'
          - Sid: TagResourcesAPI
            Effect: Allow
            Action:
              - tag:TagResources
            Resource:
              - '*'

  EC2AlertManager:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "api"
      Handler: "alerting.ec2"
      Runtime: python3.8
      MemorySize: 256
      Timeout: 300
      Events:
        CheckAlarmsScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AlertManagerDeadLetterQueue.Arn
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          TEMPLATE_S3: !Sub "yopdev-alerting-templates-${AWS::AccountId}-${AWS::Region}"
          TEAMS_API_URL: !FindInMap [ Config, !Ref EnvironmentStackName, TeamsAPIEndPoint ]
          API_SECRET_NAME: !FindInMap [ Config, !Ref EnvironmentStackName, SecretName ]
      Policies:
        - Statement:
          - Sid: CloudformationCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:ListStackResources
            Resource: 
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/EC2-alerting-stack/*'
          - Sid: CloudformationValidate
            Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            - cloudformation:ListStacks
            - cloudformation:DescribeStacks
            Resource: "*"
          - Sid: iamPassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationDeploymentRole"
          - Sid: ListBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt AlertManagerTemplateS3.Arn
          - Sid: PutTemplates
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Join [ "/", [!GetAtt AlertManagerTemplateS3.Arn, "templates/*"] ]
          - Sid: GetEc2Data
            Effect: Allow
            Action:
              - ec2:DescribeTags
              - ec2:DescribeInstances
            Resource: "*"
          - Sid: TagResources
            Effect: Allow
            Action:
              - cloudwatch:TagResource
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*'
          - Sid: TagResourcesAPI
            Effect: Allow
            Action:
              - tag:TagResources
            Resource:
              - '*'

  RDSAlertManager:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "api"
      Handler: "alerting.rds"
      Runtime: python3.8
      MemorySize: 256
      Timeout: 300
      Events:
        CheckAlarmsScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AlertManagerDeadLetterQueue.Arn
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          TEMPLATE_S3: !Sub "yopdev-alerting-templates-${AWS::AccountId}-${AWS::Region}"
          TEAMS_API_URL: !FindInMap [ Config, !Ref EnvironmentStackName, TeamsAPIEndPoint ]
          API_SECRET_NAME: !FindInMap [ Config, !Ref EnvironmentStackName, SecretName ]
      Policies:
        - Statement:
          - Sid: CloudformationCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:ListStackResources
            Resource: 
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/RDS-alerting-stack/*'
          - Sid: CloudformationValidate
            Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            - cloudformation:ListStacks
            - cloudformation:DescribeStacks
            Resource: "*"
          - Sid: iamPassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationDeploymentRole"
          - Sid: ListBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt AlertManagerTemplateS3.Arn
          - Sid: PutTemplates
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Join [ "/", [!GetAtt AlertManagerTemplateS3.Arn, "templates/*"] ]
          - Sid: GetRDSData
            Effect: Allow
            Action:
              - rds:DescribeDBInstances
              - rds:ListTagsForResource
            Resource: "*"
          - Sid: TagResources
            Effect: Allow
            Action:
              - cloudwatch:TagResource
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*'
          - Sid: TagResourcesAPI
            Effect: Allow
            Action:
              - tag:TagResources
            Resource:
              - '*'
  
  ASGAlertManager:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "api"
      Handler: "alerting.asg"
      Runtime: python3.8
      MemorySize: 256
      Timeout: 300
      Events:
        CheckAlarmsScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt AlertManagerDeadLetterQueue.Arn
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          TEMPLATE_S3: !Sub "yopdev-alerting-templates-${AWS::AccountId}-${AWS::Region}"
          TEAMS_API_URL: !FindInMap [ Config, !Ref EnvironmentStackName, TeamsAPIEndPoint ]
          API_SECRET_NAME: !FindInMap [ Config, !Ref EnvironmentStackName, SecretName ]
      Policies:
        - Statement:
          - Sid: CloudformationCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:ListStackResources
            Resource: 
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/ASG-alerting-stack/*'
          - Sid: CloudformationValidate
            Effect: Allow
            Action:
            - cloudformation:ValidateTemplate
            - cloudformation:ListStacks
            - cloudformation:DescribeStacks
            Resource: "*"
          - Sid: iamPassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/CloudFormationDeploymentRole"
          - Sid: ListBuckets
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt AlertManagerTemplateS3.Arn
          - Sid: PutTemplates
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !Join [ "/", [!GetAtt AlertManagerTemplateS3.Arn, "templates/*"] ]
          - Sid: ListAsg
            Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
            Resource:
              - "*"
          - Sid: TagResources
            Effect: Allow
            Action:
              - cloudwatch:TagResource
            Resource:
              - !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*'
          - Sid: TagResourcesAPI
            Effect: Allow
            Action:
              - tag:TagResources
            Resource:
              - '*'